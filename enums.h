#ifndef __ZENITH_ENUMS_H__
#define __ZENITH_ENUMS_H__

namespace zenith
{
	enum Instruction
	{
		CMD_NONE = 0,
		CMD_INC_BLOCK_LEVEL = 175,
		CMD_DEC_BLOCK_LEVEL,
		CMD_INC_READ_LEVEL,
		CMD_DEC_READ_LEVEL,
		CMD_CREATE_BLOCK,
		CMD_GO_TO_BLOCK,
		CMD_GO_TO_IF_TRUE,
		CMD_GO_TO_IF_FALSE,
		CMD_CLEAR_VAR,
		CMD_DELETE_VAR,
		CMD_CREATE_VAR,
		CMD_ADD_PROPERTY,
		CMD_PUSH_PROPERTY,
		CMD_CREATE_NATIVE_CLASS_INSTANCE,
		CMD_CALL_NATIVE_FUNCTION,
		CMD_CREATE_FUNCTION,
		CMD_CALL_FUNCTION,
		CMD_INVOKE_METHOD,
		CMD_LEAVE_FUNCTION,
		CMD_PUSH_FUNCTION_CHAIN,
		CMD_POP_FUNCTION_CHAIN,
		CMD_IF_STATEMENT,
		CMD_ELSE_STATEMENT,
		CMD_LEAVE_BLOCK,
		CMD_LEAVE_IF_STATEMENT,
		CMD_LEAVE_ELSE_STATEMENT,
		CMD_STACK_POP_OBJECT,

		CMD_LOOP_BREAK,
		CMD_LOOP_CONTINUE,

		CMD_LOAD_VARIABLE,
		CMD_LOAD_INTEGER,
		CMD_LOAD_FLOAT,
		CMD_LOAD_STRING,
		CMD_LOAD_NULL,

		CMD_OP_PUSH,
		CMD_OP_CLEAR,
		CMD_OP_UNARY_NEG,
		CMD_OP_UNARY_POS,
		CMD_OP_UNARY_NOT,
		CMD_OP_POW,
		CMD_OP_ADD,
		CMD_OP_SUB,
		CMD_OP_MUL,
		CMD_OP_DIV,
		CMD_OP_MOD,
		CMD_OP_AND,
		CMD_OP_OR,
		CMD_OP_EQL,
		CMD_OP_NEQL,
		CMD_OP_LT,
		CMD_OP_GT,
		CMD_OP_LTE,
		CMD_OP_GTE,

		CMD_OP_ASSIGN,
		CMD_OP_ADD_ASSIGN,
		CMD_OP_SUB_ASSIGN,
		CMD_OP_MUL_ASSIGN,
		CMD_OP_DIV_ASSIGN
	};

	enum BlockType
	{
		UNDEFINED_BLOCK = 30,
		LABEL_BLOCK, // basic label to use gotos on
		FUNCTION_BLOCK,
		IF_STATEMENT_BLOCK,
		ELSE_STATEMENT_BLOCK,
		CLASS_BLOCK,
		SWITCH_STATEMENT_BLOCK,
		FOR_LOOP_BLOCK,
		FOR_EACH_LOOP_BLOCK,
		WHILE_LOOP_BLOCK,
		DO_WHILE_LOOP_BLOCK
	};

	enum LiteralType
	{
		LITERAL_TYPE_EMPTY = '0',
		LITERAL_TYPE_STRING = 's',
		LITERAL_TYPE_CHAR = 'c',
		LITERAL_TYPE_EXPRESSION = 'e',
		LITERAL_TYPE_REFERENCE = 'r'
	};

	enum VarType
	{
		VAR_TYPE_FUNCTION = 100,
		VAR_TYPE_CLASS,
		VAR_TYPE_OBJECT,
		VAR_TYPE_VOID,
		VAR_TYPE_UNDEFINED,
		VAR_TYPE_ANY
	};

	enum NumberType
	{
		NUMBER_TYPE_INTEGER = 300,
		NUMBER_TYPE_DOUBLE,
		NUMBER_TYPE_FLOAT,
		NUMBER_TYPE_BOOLEAN,
		NUMBER_TYPE_LONG,
		NUMBER_TYPE_UNSIGNED_INTEGER,
		NUMBER_TYPE_UNSIGNED_LONG
	};

	enum StackType
	{
		STACK_FUNCTION_CALLBACK,
		STACK_FUNCTION_PARAM,
		STACK_OBJECT_PROPERTY_ACCESS,
		STACK_OBJECTS
	};
}

#endif